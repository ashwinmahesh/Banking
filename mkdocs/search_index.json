{
    "docs": [
        {
            "location": "/",
            "text": "Installation\n\n\nDownload or pull project off of github, code provided in the link below.  \n\nRuns on python 3.4 or greater, requires just the requests module; but it will need a valid CIBC username and password to run (mine have been removed for security reasons).\nScipyStack.py is a file of requirements for my general scipy stack, but not required for this project\n\n\n\n\nNOTE\n\n\nFor the code, go to \nhere\n\n\n\n\nGetting Started\n\n\nTo begin, make a call to the StudentBanking function, providing monthly expense, real exclusion, and extra arguments.  When prompted, provide bank card number and password.\n\n\nMonthly expenses\n\n\nMonthly expenses is a dictionary of expense names and values representing their costs, each being calculated monthly.  For example\n\n\n  MonthlyExpenses={\n          'laundry': 20,\n          'groceries': 130,\n          'phone': 40,\n          'hydro': 60\n  }\n\n\n\nthese items will be used to calculate weekly income, after expenses (weekly)\n\n\nReal Exclusion\n\n\nReal exclusion is for banking items that you do not want included in the analysis.  For example\n\n\n  realExclusion={\n      'rent': [re.compile(r'PREAUTHORIZED DEBIT .* KW4RENT INC'),625, 2, 'Debit'],\n                          r'PREAUTHORIZED DEBIT .* KW4RENT INC'\n      'tuition': [re.compile(r'INTERNET BILL PAY .* UNIVERSITY OF WATERLOO'),3224.89,1,'Debit']\n  }\n\n\n\nthese items are provided as a dictionary of lists, each list of 4 values: \n\n\n\n\n\n\nregex to find the description of the item in the list of banking transactions\n\n\n\n\n\n\namount of money this will exclude, each time\n\n\n\n\n\n\nnumber of times to exclude this item\n\n\n\n\n\n\n'Debit' or 'Credit' transaction type\n\n\n\n\n\n\nThe total amount of money (lump sum) adds or subtracts the amount corresponding to the real exclusion, then the individual transactions are excluded from the rest of the analysis.  These transactions are included in the number amounts shown, but as if they all occurred at the beginning of the term instead of incrementally throughout the term.\n\n\nExtra\n\n\nThe extra argument allows you to compare the current term to prior terms.  It'll look something like this:\n\n\nextra=[\n        {\n            'name': 'Fall 2016',\n            'dateFrom':datetime.datetime(year=2016,month=9,day=1),\n            'dateUntil':datetime.datetime(year=2016,month=12,day=20),\n            'MonthlyExpenses':MonthlyExpenses,\n            'customExclusions':{\n                    'rent': [re.compile(r'PREAUTHORIZED DEBIT .* KW4RENT INC'), 625, 4, 'Debit'],\n                    'tuition': [re.compile(r'INTERNET BILL PAY .* UNIVERSITY OF WATERLOO'),2550.25, 1,'Debit']\n            }\n        },\n        {\n            'name': 'Spring, 2016',\n            'dateFrom':datetime.datetime(year=2016,month=5,day=1),\n            'dateUntil':datetime.datetime(year=2016,month=8,day=20),\n            'MonthlyExpenses':MonthlyExpenses,\n            'customExclusions':{\n                'rent': [re.compile(r'PREAUTHORIZED DEBIT .* KW4RENT INC'), 625, 4, 'Debit'],\n                'tuition': [re.compile(r'INTERNET BILL PAY .* UNIVERSITY OF WATERLOO'),2445.19, 1, 'Debit']\n            }\n        },\n        {\n            'name': 'Winter, 2015',\n            'dateFrom':datetime.datetime(year=2015,month=1,day=1),\n            'dateUntil':datetime.datetime(year=2015,month=4,day=20),\n            'MonthlyExpenses':MonthlyExpenses,\n            'customExclusions':{\n                'rent': [re.compile(r'.* ZAIN VALANI'), 560, 3, 'Debit'],\n                'tuition': [re.compile(r'INTERNET BILL PAY .* UNIVERSITY OF WATERLOO'), 1049.0, 1, 'Debit']\n            }\n        },\n    ]\n\n\n\nextra takes a list of dictionaries, each representing a period, given by dateFrom and dateUntil (python datetimes), using custom exclusions and month expenses explained above, and a name for the chart\n\n\nTemplate\n\n\nIt is important to maintain the original directory structure before running.  After running program template.html in the bankingTemplate directory will have been updated, to reflect the arguments provided to the StudentBanking function. \n\n\nThe template treats all credit to the account as a lump sum payment at the beginning of the term, even if that is not the case, and pulls from that lump sum the grand total of all the real exclusions as if they had happened at the beginning of the term, even if that is not the case.  Real Exclusions are then ignored from the statement moving forward.  \n\n\n\n\nBalance\n is the lump sum less any debits to the account, excluding the real exclusions\n\n\nIncome\n is represented by dividing the current amount left in the lump sum by the remaining number of weeks, for each week\n\n\nIncome After Bills\n is that weeks income, less the weekly bills (provided by month, calculated for each week)\n\n\nExpenditure\n is the sum of the debits, excluding real exclusions, pulled from the CIBC API for each given week",
            "title": "Usage"
        },
        {
            "location": "/#installation",
            "text": "Download or pull project off of github, code provided in the link below.   \nRuns on python 3.4 or greater, requires just the requests module; but it will need a valid CIBC username and password to run (mine have been removed for security reasons).\nScipyStack.py is a file of requirements for my general scipy stack, but not required for this project   NOTE  For the code, go to  here",
            "title": "Installation"
        },
        {
            "location": "/#getting-started",
            "text": "To begin, make a call to the StudentBanking function, providing monthly expense, real exclusion, and extra arguments.  When prompted, provide bank card number and password.",
            "title": "Getting Started"
        },
        {
            "location": "/#monthly-expenses",
            "text": "Monthly expenses is a dictionary of expense names and values representing their costs, each being calculated monthly.  For example    MonthlyExpenses={\n          'laundry': 20,\n          'groceries': 130,\n          'phone': 40,\n          'hydro': 60\n  }  these items will be used to calculate weekly income, after expenses (weekly)",
            "title": "Monthly expenses"
        },
        {
            "location": "/#real-exclusion",
            "text": "Real exclusion is for banking items that you do not want included in the analysis.  For example    realExclusion={\n      'rent': [re.compile(r'PREAUTHORIZED DEBIT .* KW4RENT INC'),625, 2, 'Debit'],\n                          r'PREAUTHORIZED DEBIT .* KW4RENT INC'\n      'tuition': [re.compile(r'INTERNET BILL PAY .* UNIVERSITY OF WATERLOO'),3224.89,1,'Debit']\n  }  these items are provided as a dictionary of lists, each list of 4 values:     regex to find the description of the item in the list of banking transactions    amount of money this will exclude, each time    number of times to exclude this item    'Debit' or 'Credit' transaction type    The total amount of money (lump sum) adds or subtracts the amount corresponding to the real exclusion, then the individual transactions are excluded from the rest of the analysis.  These transactions are included in the number amounts shown, but as if they all occurred at the beginning of the term instead of incrementally throughout the term.",
            "title": "Real Exclusion"
        },
        {
            "location": "/#extra",
            "text": "The extra argument allows you to compare the current term to prior terms.  It'll look something like this:  extra=[\n        {\n            'name': 'Fall 2016',\n            'dateFrom':datetime.datetime(year=2016,month=9,day=1),\n            'dateUntil':datetime.datetime(year=2016,month=12,day=20),\n            'MonthlyExpenses':MonthlyExpenses,\n            'customExclusions':{\n                    'rent': [re.compile(r'PREAUTHORIZED DEBIT .* KW4RENT INC'), 625, 4, 'Debit'],\n                    'tuition': [re.compile(r'INTERNET BILL PAY .* UNIVERSITY OF WATERLOO'),2550.25, 1,'Debit']\n            }\n        },\n        {\n            'name': 'Spring, 2016',\n            'dateFrom':datetime.datetime(year=2016,month=5,day=1),\n            'dateUntil':datetime.datetime(year=2016,month=8,day=20),\n            'MonthlyExpenses':MonthlyExpenses,\n            'customExclusions':{\n                'rent': [re.compile(r'PREAUTHORIZED DEBIT .* KW4RENT INC'), 625, 4, 'Debit'],\n                'tuition': [re.compile(r'INTERNET BILL PAY .* UNIVERSITY OF WATERLOO'),2445.19, 1, 'Debit']\n            }\n        },\n        {\n            'name': 'Winter, 2015',\n            'dateFrom':datetime.datetime(year=2015,month=1,day=1),\n            'dateUntil':datetime.datetime(year=2015,month=4,day=20),\n            'MonthlyExpenses':MonthlyExpenses,\n            'customExclusions':{\n                'rent': [re.compile(r'.* ZAIN VALANI'), 560, 3, 'Debit'],\n                'tuition': [re.compile(r'INTERNET BILL PAY .* UNIVERSITY OF WATERLOO'), 1049.0, 1, 'Debit']\n            }\n        },\n    ]  extra takes a list of dictionaries, each representing a period, given by dateFrom and dateUntil (python datetimes), using custom exclusions and month expenses explained above, and a name for the chart",
            "title": "Extra"
        },
        {
            "location": "/#template",
            "text": "It is important to maintain the original directory structure before running.  After running program template.html in the bankingTemplate directory will have been updated, to reflect the arguments provided to the StudentBanking function.   The template treats all credit to the account as a lump sum payment at the beginning of the term, even if that is not the case, and pulls from that lump sum the grand total of all the real exclusions as if they had happened at the beginning of the term, even if that is not the case.  Real Exclusions are then ignored from the statement moving forward.     Balance  is the lump sum less any debits to the account, excluding the real exclusions  Income  is represented by dividing the current amount left in the lump sum by the remaining number of weeks, for each week  Income After Bills  is that weeks income, less the weekly bills (provided by month, calculated for each week)  Expenditure  is the sum of the debits, excluding real exclusions, pulled from the CIBC API for each given week",
            "title": "Template"
        },
        {
            "location": "/api/",
            "text": "Authentication\n\n\nFirstly, you'll need to create an authentication request to acquire an X Auth Token.  The headers are pulled from a request on my computer, feel free to change them to headers acquired from yours or another header.  Note that the URL is an encrypted HTTPS request, as are all calls made to the API.\n\n\nauthenticate_request = requests.post(\n    url=\"https://www.cibconline.cibc.com/ebm-anp/api/v1/json/sessions\",\n    json={\"card\": {\"value\": \"{}\".format(_username), \"description\": \"\", \"encrypted\": False, \"encrypt\": True},\n          \"password\": \"{}\".format(_password)},\n    headers={\n        \"Host\": \"www.cibconline.cibc.com\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0\",\n        \"Accept\": \"application/vnd.api+json\",\n        \"Accept-Language\": \"en\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Referer\":\"https://www.cibconline.cibc.com/ebm-resources/public/banking/cibc/client/web/index.html\",\n        \"Content-Type\": \"application/vnd.api+json\",\n        \"Client-Type\": \"default_web\",\n        \"X-Auth-Token\": \"\",\n        \"brand\": \"cibc\",\n        \"WWW-Authenticate\": \"CardAndPassword\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Content-Length\": \"112\",\n        \"Connection\": \"keep-alive\",\n        \"Pragma\": \"no-cache\",\n        \"Cache-Control\": \"no-cache\"\n    }\n)\n\n\n\nNext you'll need to save the cookies, response header, and X Auth Token\n\n\ncookies = dict(authenticate_request.cookies)\nself.cookies = cookies\nauthenticate_response_headers = authenticate_request.headers\nX_Auth_Token = authenticate_response_headers['X-Auth-Token']\nself.X_Auth_Token = X_Auth_Token\n\n\n\nLogin Request\n\n\nMake a login request like below.  Again the headers are not rigid, however, the \"X-Auth-Token\" filed must be the X Auth Token from earlier.\n\n\nrequest\n\n\nlogin_request = requests.get(\n    url=\"https://www.cibconline.cibc.com/ebm-anp/api/v1/profile/json/userPreferences\",\n    headers={\n        \"Host\": \"www.cibconline.cibc.com\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0\",\n        \"Accept\": \"application/vnd.api+json\",\n        \"Accept-Language\": \"en\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Referer\":\"https://www.cibconline.cibc.com/ebm-resources/public/banking/cibc/client/web/index.html\",\n        \"Content-Type\": \"application/vnd.api+json\",\n        \"Client-Type\": \"default_web\",\n        \"brand\": \"cibc\",\n        \"X-Auth-Token\": X_Auth_Token,\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Connection\": \"keep-alive\",\n    },\n    cookies=cookies\n)\n\n\n\nAccount ID\n\n\nafter logging in as yourself, go ahead and pull your default account id from the response\n\n\nlogin_request_response = login_request.json()\ndefaultAccountId = login_request_response['userPreferences'][0]['payeePreferences'][0]['defaultAccountId']\n\n\n\nyour Default Account ID is persistant across sessions, however I don't recconmend saving it.\n\n\nChequing Requests\n\n\nInstead of going through the entire API, because I don't own it and didn't build it, I\u2019ll only go through pulling chequing account entries (credits and debits)\n\n\nurl\n\n\nurl = \"https://www.cibconline.cibc.com/ebm-ai/api/v1/json/transactions?accountId={}&filterBy=range&fromDate={}&lastFilterBy=range&limit=250&lowerLimitAmount=&offset=0&sortAsc=true&sortByField=date&toDate={}&transactionLocation=&transactionType=&upperLimitAmount=\".format(\n        defaultAccountId,\n        dateFrom.strftime(\"%Y-%m-%d\"),\n        dateUntil.strftime(\"%Y-%m-%d\")\n    )\n\n\n\nthe dateFrom and dateUntil arguments are python datetimes representing from when until when you want to pull credit and debit entries\n\n\nRequest\n\n\nchequing_requests = requests.get(\n    url=\"https://www.cibconline.cibc.com/ebm-ai/api/v1/json/transactions?accountId={}&filterBy=range&fromDate={}&lastFilterBy=range&limit=150&lowerLimitAmount=&offset=0&sortAsc=true&sortByField=date&toDate={}&transactionLocation=&transactionType=&upperLimitAmount=\".format(\n        defaultAccountId,\n        dateFrom.strftime(\"%Y-%m-%d\"),\n        dateUntil.strftime(\"%Y-%m-%d\")\n    ),\n    headers={\n        \"Host\": \"www.cibconline.cibc.com\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0\",\n        \"Accept\": \"application/vnd.api+json\",\n        \"Accept-Language\": \"en\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Referer\":\"https://www.cibconline.cibc.com/ebm-resources/public/banking/cibc/client/web/index.html\",\n        \"Content-Type\": \"application/vnd.api+json\",\n        \"Client-Type\": \"default_web\",\n        \"brand\": \"cibc\",\n        \"X-Auth-Token\": X_Auth_Token,\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Connection\": \"keep-alive\",\n    },\n    cookies=cookies\n  )\ntransactions = chequing_requests.json()['transactions']\n\n\n\nTransactions\n\n\nThere are a couple of ways to do this one, I set it up as an iterator.  This is just to format the output as a nice dictionary.\n\n\nfor transaction in transactions:\n    transaction_type = 'Debit' if transaction['debit'] else 'Credit'\n    date_datetime = datetime.datetime.strptime(transaction['date'].split('T')[0],\"%Y-%m-%d\")\n    amount = transaction['debit'] if transaction_type == 'Debit' else transaction['credit']\n    yield {\n        'transaction': transaction_type,  # 'Debit' or 'Credit'\n        'date': date_datetime,\n        'details': transaction['transactionDescription'],\n        'amount': amount,\n        'balance': transaction['runningBalance']\n    }",
            "title": "CIBC's API"
        },
        {
            "location": "/api/#authentication",
            "text": "Firstly, you'll need to create an authentication request to acquire an X Auth Token.  The headers are pulled from a request on my computer, feel free to change them to headers acquired from yours or another header.  Note that the URL is an encrypted HTTPS request, as are all calls made to the API.  authenticate_request = requests.post(\n    url=\"https://www.cibconline.cibc.com/ebm-anp/api/v1/json/sessions\",\n    json={\"card\": {\"value\": \"{}\".format(_username), \"description\": \"\", \"encrypted\": False, \"encrypt\": True},\n          \"password\": \"{}\".format(_password)},\n    headers={\n        \"Host\": \"www.cibconline.cibc.com\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0\",\n        \"Accept\": \"application/vnd.api+json\",\n        \"Accept-Language\": \"en\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Referer\":\"https://www.cibconline.cibc.com/ebm-resources/public/banking/cibc/client/web/index.html\",\n        \"Content-Type\": \"application/vnd.api+json\",\n        \"Client-Type\": \"default_web\",\n        \"X-Auth-Token\": \"\",\n        \"brand\": \"cibc\",\n        \"WWW-Authenticate\": \"CardAndPassword\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Content-Length\": \"112\",\n        \"Connection\": \"keep-alive\",\n        \"Pragma\": \"no-cache\",\n        \"Cache-Control\": \"no-cache\"\n    }\n)  Next you'll need to save the cookies, response header, and X Auth Token  cookies = dict(authenticate_request.cookies)\nself.cookies = cookies\nauthenticate_response_headers = authenticate_request.headers\nX_Auth_Token = authenticate_response_headers['X-Auth-Token']\nself.X_Auth_Token = X_Auth_Token",
            "title": "Authentication"
        },
        {
            "location": "/api/#login-request",
            "text": "Make a login request like below.  Again the headers are not rigid, however, the \"X-Auth-Token\" filed must be the X Auth Token from earlier.",
            "title": "Login Request"
        },
        {
            "location": "/api/#request",
            "text": "login_request = requests.get(\n    url=\"https://www.cibconline.cibc.com/ebm-anp/api/v1/profile/json/userPreferences\",\n    headers={\n        \"Host\": \"www.cibconline.cibc.com\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0\",\n        \"Accept\": \"application/vnd.api+json\",\n        \"Accept-Language\": \"en\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Referer\":\"https://www.cibconline.cibc.com/ebm-resources/public/banking/cibc/client/web/index.html\",\n        \"Content-Type\": \"application/vnd.api+json\",\n        \"Client-Type\": \"default_web\",\n        \"brand\": \"cibc\",\n        \"X-Auth-Token\": X_Auth_Token,\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Connection\": \"keep-alive\",\n    },\n    cookies=cookies\n)",
            "title": "request"
        },
        {
            "location": "/api/#account-id",
            "text": "after logging in as yourself, go ahead and pull your default account id from the response  login_request_response = login_request.json()\ndefaultAccountId = login_request_response['userPreferences'][0]['payeePreferences'][0]['defaultAccountId']  your Default Account ID is persistant across sessions, however I don't recconmend saving it.",
            "title": "Account ID"
        },
        {
            "location": "/api/#chequing-requests",
            "text": "Instead of going through the entire API, because I don't own it and didn't build it, I\u2019ll only go through pulling chequing account entries (credits and debits)",
            "title": "Chequing Requests"
        },
        {
            "location": "/api/#url",
            "text": "url = \"https://www.cibconline.cibc.com/ebm-ai/api/v1/json/transactions?accountId={}&filterBy=range&fromDate={}&lastFilterBy=range&limit=250&lowerLimitAmount=&offset=0&sortAsc=true&sortByField=date&toDate={}&transactionLocation=&transactionType=&upperLimitAmount=\".format(\n        defaultAccountId,\n        dateFrom.strftime(\"%Y-%m-%d\"),\n        dateUntil.strftime(\"%Y-%m-%d\")\n    )  the dateFrom and dateUntil arguments are python datetimes representing from when until when you want to pull credit and debit entries",
            "title": "url"
        },
        {
            "location": "/api/#request_1",
            "text": "chequing_requests = requests.get(\n    url=\"https://www.cibconline.cibc.com/ebm-ai/api/v1/json/transactions?accountId={}&filterBy=range&fromDate={}&lastFilterBy=range&limit=150&lowerLimitAmount=&offset=0&sortAsc=true&sortByField=date&toDate={}&transactionLocation=&transactionType=&upperLimitAmount=\".format(\n        defaultAccountId,\n        dateFrom.strftime(\"%Y-%m-%d\"),\n        dateUntil.strftime(\"%Y-%m-%d\")\n    ),\n    headers={\n        \"Host\": \"www.cibconline.cibc.com\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0\",\n        \"Accept\": \"application/vnd.api+json\",\n        \"Accept-Language\": \"en\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Referer\":\"https://www.cibconline.cibc.com/ebm-resources/public/banking/cibc/client/web/index.html\",\n        \"Content-Type\": \"application/vnd.api+json\",\n        \"Client-Type\": \"default_web\",\n        \"brand\": \"cibc\",\n        \"X-Auth-Token\": X_Auth_Token,\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Connection\": \"keep-alive\",\n    },\n    cookies=cookies\n  )\ntransactions = chequing_requests.json()['transactions']",
            "title": "Request"
        },
        {
            "location": "/api/#transactions",
            "text": "There are a couple of ways to do this one, I set it up as an iterator.  This is just to format the output as a nice dictionary.  for transaction in transactions:\n    transaction_type = 'Debit' if transaction['debit'] else 'Credit'\n    date_datetime = datetime.datetime.strptime(transaction['date'].split('T')[0],\"%Y-%m-%d\")\n    amount = transaction['debit'] if transaction_type == 'Debit' else transaction['credit']\n    yield {\n        'transaction': transaction_type,  # 'Debit' or 'Credit'\n        'date': date_datetime,\n        'details': transaction['transactionDescription'],\n        'amount': amount,\n        'balance': transaction['runningBalance']\n    }",
            "title": "Transactions"
        }
    ]
}